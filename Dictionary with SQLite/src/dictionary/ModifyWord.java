/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dictionary;


import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author programmer
 */
public class ModifyWord extends javax.swing.JFrame {

    /**
     * Creates new form ModifyWord
     */
    HashMap<String,String> maps = new HashMap<>();
    String columns[]={""};
    String array[][] = new String[0][0];
    static String[] row = new String[1];
    String[] row3 = new String[1];
    TableRowSorter<TableModel> rsorter;
    Container container;
    static DefaultTableModel model; 
    Connection connection;
    Statement statement;
    ResultSet resultSet;
    String username="root";
    String password="";
    String valueInCell;
    int row2;
    
    public ModifyWord() {
        container = getContentPane();
            container.setBackground(new Color(228,247,163));
            model = new DefaultTableModel(array,columns){
            boolean[] canEdit = new boolean [] { false};
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {return canEdit [columnIndex];}
            };
                      try{
			Class.forName("org.sqlite.JDBC");
                        connection = DriverManager.getConnection("jdbc:sqlite:avskDictionary.db");
			statement = connection.createStatement(); 
			resultSet= statement.executeQuery("SELECT word, meaning FROM dictionary");	
			
                            while(resultSet.next()){   
                                String s1 =resultSet.getString(1);
                                String s2 =resultSet.getString(2);
                                maps.put(s1,s2);
                                row[0]=s1;
                                model.addRow(row);
                            }      
			connection.close();	
				
			}catch(SQLException |ClassNotFoundException e){ 
                        JOptionPane.showMessageDialog(this,e,"Error",JOptionPane.INFORMATION_MESSAGE);
			} 
        initComponents();
         try{
        Font mangal = createFont("mangal.ttf");
        DescriptionArea.setFont(mangal);
        }catch(Exception ee){ }
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/icons/avsk.png")).getImage());
        setLocationRelativeTo(null);
        rsorter = new TableRowSorter<TableModel>(model);
        dataTable.setRowSorter(rsorter);
        
        /*java.util.List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        int columnIndexToSort = 0;
        sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.ASCENDING));
        rsorter.setSortKeys(sortKeys);*/
       
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        DescriptionArea = new javax.swing.JTextArea();
        searchWord = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        updateWord = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Anuraj's English to Hindi Dictionary");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        dataTable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        dataTable.setModel(model);
        dataTable.setSelectionBackground(new java.awt.Color(0, 204, 255));
        dataTable.getTableHeader().setReorderingAllowed(false);
        dataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dataTableMouseClicked(evt);
            }
        });
        dataTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dataTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(dataTable);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        DescriptionArea.setBackground(new java.awt.Color(228, 247, 163));
        DescriptionArea.setColumns(20);
        DescriptionArea.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        DescriptionArea.setLineWrap(true);
        DescriptionArea.setRows(5);
        DescriptionArea.setWrapStyleWord(true);
        DescriptionArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        DescriptionArea.setEnabled(false);
        DescriptionArea.setSelectionColor(new java.awt.Color(0, 0, 0));
        jScrollPane2.setViewportView(DescriptionArea);

        searchWord.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchWord.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        searchWord.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchWordKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 51));
        jLabel1.setText("Update Word");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 0, 51));
        jLabel2.setText("Search Word");

        jLabel3.setFont(new java.awt.Font("Monotype Corsiva", 3, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 51));
        jLabel3.setText("Anuraj's Dictionary");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/avsk.png"))); // NOI18N

        updateWord.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        updateWord.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateWord.setEnabled(false);
        updateWord.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                updateWordKeyTyped(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 204, 153));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("Update");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 204, 153));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("Hindi Keyboard");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(updateWord)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchWord, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchWord, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateWord, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dataTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataTableMouseClicked
        // TODO add your handling code here:
        row2 = dataTable.getSelectedRow();
        final int column = dataTable.getSelectedColumn();
        valueInCell = (String)dataTable.getValueAt(row2, column);
        String value = maps.get(valueInCell);
        DescriptionArea.setText(value);
        updateWord.setText(valueInCell);
        updateWord.setEnabled(true);
        DescriptionArea.setEnabled(true);
        System.out.println("Anuraj's dictionary");
    }//GEN-LAST:event_dataTableMouseClicked

    private void dataTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dataTableKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            row2 = dataTable.getSelectedRow();
            final int column = dataTable.getSelectedColumn();
            valueInCell = (String)dataTable.getValueAt(row2-1, column);
            String value = maps.get(valueInCell);
            updateWord.setText(valueInCell);
            DescriptionArea.setText(value);
        }
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            row2 = dataTable.getSelectedRow();
            final int column = dataTable.getSelectedColumn();
            valueInCell = (String)dataTable.getValueAt(row2+1, column);
            String value = maps.get(valueInCell);
            updateWord.setText(valueInCell);
            DescriptionArea.setText(value);

        }
    }//GEN-LAST:event_dataTableKeyPressed

    private void searchWordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchWordKeyTyped
        // TODO add your handling code here:
        String text=searchWord.getText().trim().toLowerCase();
        if(text.length()==0){
            rsorter.setRowFilter(null);
        }
        rsorter.setRowFilter(RowFilter.regexFilter(text));
    }//GEN-LAST:event_searchWordKeyTyped

    private void updateWordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateWordKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_updateWordKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
       String  s1 = updateWord.getText().trim().toLowerCase();
       String s2 = DescriptionArea.getText().trim();
        if(s1.isEmpty()||s2.isEmpty()){
            JOptionPane.showMessageDialog(this,"Textfields is empty","Error",JOptionPane.ERROR_MESSAGE);

        }else{         
                   
                        
                          
                        try{
							Class.forName("org.sqlite.JDBC");
                                                        connection = DriverManager.getConnection("jdbc:sqlite:avskDictionary.db");
      							String query = "delete from dictionary where word = ?";
      							PreparedStatement preparedStmt = connection.prepareStatement(query);
      							preparedStmt.setString(1, valueInCell);
      							preparedStmt.execute();
                                                        
      							connection.close();
				   		
                                                       
							Connection conn = DriverManager.getConnection("jdbc:sqlite:avskDictionary.db");
							PreparedStatement preparedStmt2 =  conn.prepareStatement("INSERT INTO dictionary(word,meaning) VALUES(?,?)");
			                		preparedStmt2.setString(1,s1);
							preparedStmt2.setString(2,s2);
							
							preparedStmt2.executeUpdate();
                                                        
                                                        
							JOptionPane.showMessageDialog(this,"Update "+s1+" Successful","Success",JOptionPane.INFORMATION_MESSAGE);
							maps.put(s1, s2);
                                                        updateWord.setText("");	
                                                        DescriptionArea.setText("");
                                                        updateWord.setEnabled(false);
                                                        DescriptionArea.setEnabled(false);
                                                        model.removeRow(row2);
                                                        row3[0]=s1;
                                                        model.addRow(row3);
							s1 = "";
                                                        s2 = "";
                                                        
							conn.close();
                                                        

							}
						catch(ClassNotFoundException | HeadlessException | SQLException e){ JOptionPane.showMessageDialog(this,e,"Error",JOptionPane.ERROR_MESSAGE);}
            
           
                          
            
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        Dictionary dictionary  = new Dictionary();
        dictionary.setVisible(true);
        dispose();
    }//GEN-LAST:event_formWindowClosing

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Keyboard keyboard = new Keyboard();
        keyboard.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
     public static final String FONT_PATH_TELEGRAFICO = "icons/Kruti Dev 714 Normal.ttf";
    private static Font createFont(String url) throws FontFormatException, IOException{
        return Font.createFont(Font.TRUETYPE_FONT,AddNewWord.class.getClassLoader().getResourceAsStream(FONT_PATH_TELEGRAFICO))
               .deriveFont(20, 30f);
        
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModifyWord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModifyWord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModifyWord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModifyWord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModifyWord().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea DescriptionArea;
    private javax.swing.JTable dataTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField searchWord;
    private javax.swing.JTextField updateWord;
    // End of variables declaration//GEN-END:variables
}
